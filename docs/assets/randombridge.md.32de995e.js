import{_ as e,o as t,c as a,N as r}from"./chunks/framework.da3b0f29.js";const g=JSON.parse('{"title":"Randomization Bridge","description":"","frontmatter":{},"headers":[],"relativePath":"randombridge.md"}'),i={name:"randombridge.md"},o=r('<h1 id="randomization-bridge" tabindex="-1">Randomization Bridge <a class="header-anchor" href="#randomization-bridge" aria-label="Permalink to &quot;Randomization Bridge&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The Randomization Bridge is a reservation system built on an Ethereum smart contract that bridges Bitcoin addresses. The primary goal of this system is to enable the creation of provably random NFTs (Non-Fungible Tokens) and to facilitate a better and faster payment process. The system leverages a provable randomness method by utilizing a provenance hash combined with a future block hash shuffle.</p><p>The bridge employs a whitelisting system on the Ethereum network to prevent sybil attacks and establish a provably large holder count. While it requires a certain degree of trust during the reservation process, the overall benefits of the Randomization Bridge make it more trustless compared to other mints on Ethereum or Bitcoin.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li>Bridges Bitcoin addresses collected on an Ethereum smart contract</li><li>Facilitates a faster payment system on Ethereum</li><li>Creates provably random NFTs using provenance hash and future block hash</li><li>Implements a whitelisting system to prevent sybil attacks</li><li>Ensures a provably large holder count</li></ul><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><h3 id="ethereum-smart-contract" tabindex="-1">Ethereum Smart Contract <a class="header-anchor" href="#ethereum-smart-contract" aria-label="Permalink to &quot;Ethereum Smart Contract&quot;">​</a></h3><p>The Randomization Bridge is built on an Ethereum smart contract. This smart contract is responsible for collecting Bitcoin addresses and executing the provable random shuffle. The Ethereum smart contract is used to bridge the initial mint to Bitcoin NFTs.</p><h3 id="randomization" tabindex="-1">Randomization <a class="header-anchor" href="#randomization" aria-label="Permalink to &quot;Randomization&quot;">​</a></h3><p>To generate provably random NFTs, the system combines a provenance hash with a future block hash. This ensures that the NFTs generated are truly random and cannot be tampered with. Noone, not even the team or miners, can manipulate the randomness.</p><h3 id="whitelisting" tabindex="-1">Whitelisting <a class="header-anchor" href="#whitelisting" aria-label="Permalink to &quot;Whitelisting&quot;">​</a></h3><p>The Randomization Bridge uses a whitelisting system on the Ethereum network to prevent sybil attacks. This system helps maintain a provably large holder count, which would not be possible on Bitcoin alone.</p><h2 id="reservation-process" tabindex="-1">Reservation Process <a class="header-anchor" href="#reservation-process" aria-label="Permalink to &quot;Reservation Process&quot;">​</a></h2><ol><li><strong>Reservation</strong>: Whitelist is given to existing and established collections. Users reserve a spot in the minting process by sending their Bitcoin address and the fees on Ethereum.</li><li><strong>Secret Provenance Hash</strong>: Collection art and metadata is locked through a hashed secret.</li><li><strong>Future Block Commit</strong>: A future block is picked.</li><li><strong>Random Seed</strong>: When the future block has been mined the block hash is used to create a random seed.</li><li><strong>Shuffle</strong>: The collection art and metadata is shuffled using the random seed and revealed.</li><li><strong>Mint</strong>: The shuffled NFTs are minted to the corresponding Bitcoin addresses.</li></ol><p>Full Source code licensed under MIT can be found here: <a href="https://etherscan.io/address/0x165f848f980309f6147b8adfc8589cc35c587ca7#code" target="_blank" rel="noreferrer">https://etherscan.io/address/0x165f848f980309f6147b8adfc8589cc35c587ca7#code</a></p>',16),s=[o];function n(h,l,d,c,m,u){return t(),a("div",null,s)}const p=e(i,[["render",n]]);export{g as __pageData,p as default};
